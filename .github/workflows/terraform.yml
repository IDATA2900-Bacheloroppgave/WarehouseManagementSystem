name: deploy

on:
  push:
    branches:
      - main
      - cicd-pipeline

jobs:
  build-and-deploy:
    # Arbituary version that is LTS.
    runs-on: ubuntu-20.04
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      # Builds and pushes the docker image to the Docker Hub, test, test, test, test, test, test, test, test
      - name: Build and push Docker image
        run: |
          docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_ACCESS_TOKEN}}
          docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}:latest 

      # Google cloud CLI
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: '${{vars.GOOGLE_PROJECT_NAME}}'

      # Google cloud authenticaiton
      - name: Set up Google Cloud Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{secrets.GOOGLE_CREDENTIALS}}"

      # Terraform 
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize Terraform
      - name: Terraform Initialize
        run: |
          terraform init -input=false -backend-config="bucket=${{secrets.BUCKET}}"

      # Plan resources to create test
      - name: Terraform Plan
        env:
          GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_CREDENTIALS}}
        run: |
          terraform plan -var "SSH_PUB_KEY=${{vars.SSH_PUB_KEY}}" -var "GOOGLE_ZONE=${{vars.GOOGLE_ZONE}}" -input=false -state="gs://${{secrets.BUCKET}}/default.tfstate"

      # Creates or updates the resources given the current state 
      - name: Terraform Apply
        env:
          GOOGLE_CLOUD_KEYFILE_JSON: ${{secrets.GOOGLE_CREDENTIALS}}
        run: |
          terraform apply -auto-approve -input=false -var "SSH_PUB_KEY=${{vars.SSH_PUB_KEY}}" -var "GOOGLE_ZONE=${{vars.GOOGLE_ZONE}}" -state="gs://${BUCKET}/default.tfstate"

      # Retrives the IP from the VM as it is ephemeral this is done after the terraform process
      - name: Get the VM IP Address and do ssh
        id: get-vm-ip
        run: |
          echo gcloud compute instances describe spring-boot-vm --zone ${{vars.GOOGLE_ZONE}} 
          VM_IP=$(gcloud compute instances describe spring-boot-vm --zone ${{vars.GOOGLE_ZONE}} --format='value(networkInterfaces[0].accessConfigs[0].natIP)')
          echo "VM_IP=$VM_IP" >> $GITHUB_ENV
          echo $VM_IP
      
      # Run app test
      - name: SSH and run the new application
        uses: fifsky/ssh-action@master
        with:
          command: | 
            cd /tmp
            ls -a
          host: ${{env.VM_IP}}
          username: ${{vars.SSH_USERNAME}}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo apt update
            sudo apt install -y docker.io
            
            sudo systemctl stop docker
            sudo systemctl start docker
            sudo systemctl enable docker
            
            sudo docker rm ${{vars.DOCKER_CONTAINER_NAME}}
            sudo docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{vars.DOCKER_ACCESS_TOKEN}}
            sudo docker pull ${{secrets.DOCKER_USERNAME}}/${{vars.DOCKER_IMAGE_NAME}}:latest
            sudo docker run -d -p 5000:5000 -e WEBSERVER_PORT=5000 --name ${{vars.DOCKER_CONTAINER_NAME}} ${{secrets.DOCKER_USERNAME}}/${{vars.DOCKER_IMAGE_NAME}}